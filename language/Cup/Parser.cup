/* ---------------Seccion de declaraciones preliminares--------------------*/
package com.language.parser;

/* Importaciones  */
import java_cup.runtime.*;
import java.io.FileReader;

/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
/* Reporte de error encontrado. */
public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        if (s.left >= 0) {
            m.append(" in line "+(s.left+1));
            if (s.right >= 0)
                m.append(", column "+(s.right+1));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}

/* Cuando se encuentra un error de donde el sistema no puede
    recuperarse, se lanza un error fatal. Se despliega el mensaje
    de error y se finaliza la ejecucion. */
public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}

/* Metodo main para garantizar la ejecucion del analizador
   lexico y sintactico, ademas que se pase como parametro la tabla
   de simbolos correspondiente. */
public static void main(String[] args){
    try {
        Parser asin = new Parser(
                new Scanner( new FileReader(args[0])));
        Object result = asin.parse().value; //parseo de datos

        //System.out.println("\n*** Resultados finales ***\n");
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
:};

/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* ***Terminales (tokens obtenidos por el analizador lexico).***
   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados luego.*/
terminal      VAR,SET,ADD,LESS,CHANGEDIR,PLACE,BLOCK,HIGH,PUT,LIGHT,POS,
               KEEP,SKIP,KEND,FOR,ID,FEND,WHEN,WHEND,POSSTART,TIMES,THEN,
                CALL,LPAREN,RPAREN,PUNTOCOMA,ASSIGN,AGGREGATE,REDUCED,COMA,
                 LEFT,RIGHT,BACK,SAME,BEGIN,END,PROC,EndPROC;
// No usados: LPARENCUAD,RPARENCUAD,COMMENT
terminal String      IDENTIFIER;
terminal Integer     NUMBER;

/* ***No terminales usados en la seccion gramatical.***
   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */

non terminal Object     sintaxis, identifiers, expresions, process;
non terminal String     ident;
non terminal Integer    data;

/* -------------Seccion de predencia y asociacion de los terminales----------- */

/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Además indica si se asocia a izquierda o derecha.
*/
  /*precedence left OP_SUMA, OP_RESTA;
  precedence left OP_MULT;*/

/* ------------------- Seccion de la gramatica ------------------------ */

sintaxis    ::= identifiers BEGIN expresions END process
/*COMMENT identifiers BEGIN expresions END process
              | identifiers COMMENT BEGIN expresions END process
              | identifiers BEGIN COMMENT expresions END process
              | identifiers BEGIN expresions COMMENT END process
              | identifiers BEGIN expresions END COMMENT process
              | identifiers BEGIN expresions END process COMMENT*/
              ;

identifiers ::= VAR ident:i
               {:
                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.var(i);
		             }
                 //System.out.println("Nueva variable con nombre: " + i);
               :}
                PUNTOCOMA
              | identifiers VAR ident:i
               {:
                 if (CodeValidation.Corrida1 == true) {
			               CodeValidation.var(i);
		             }
                 //System.out.println("Nueva variable con nombre: " + i);
               :}
                PUNTOCOMA
              | VAR ident:i ASSIGN data:d
               {:
                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.var(i,d);
		             }
                 //System.out.println("Nueva variable con nombre: " + i + " y valor: " + d);
               :}
                PUNTOCOMA
              | identifiers VAR ident:i ASSIGN data:d
               {:
                 if (CodeValidation.Corrida1 == true) {
			               CodeValidation.var(i,d);
		             }
                 //System.out.println("Nueva variable con nombre: " + i + " y valor: " + d);
               :}
                PUNTOCOMA
              ;

expresions  ::= SET ident:i ASSIGN data:d
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.set(i, d);
                 }
                 //System.out.println("La variable a modificar tiene el nombre: " + i + " y el valor cambiará a: " + d);
               :}
                PUNTOCOMA
              | expresions SET ident:i ASSIGN data:d
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.set(i, d);
                 }
                 //System.out.println("La variable a modificar tiene el nombre: " + i + " y el valor cambiará a: " + d);
               :}
                PUNTOCOMA
              | ADD AGGREGATE ident:i
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.add(i);
                 }
                 //System.out.println("Se agregará 1 a la variable: " + i);
               :}
                PUNTOCOMA
              | expresions ADD AGGREGATE ident:i
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.add(i);
                 }
                 //System.out.println("Se agregará 1 a la variable: " + i);
               :}
                PUNTOCOMA
              | LESS REDUCED ident:i
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.less(i);
                 }
                 //System.out.println("Se quitará 1 a la variable: " + i);
               :}
                PUNTOCOMA
              | expresions LESS REDUCED ident:i
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.less(i);
                 }
                 //System.out.println("Se quitará 1 a la variable: " + i);
               :}
                PUNTOCOMA
              | CHANGEDIR LPAREN LEFT RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("left");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               :}
                PUNTOCOMA
              | expresions CHANGEDIR LPAREN LEFT RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("left");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               :}
                PUNTOCOMA
              | CHANGEDIR LPAREN RIGHT RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("right");
                 }
                 //System.out.println("Cambiando direccion a RIGHT");
               :}
                PUNTOCOMA
              | expresions CHANGEDIR LPAREN RIGHT RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("right");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               :}
                PUNTOCOMA
              | CHANGEDIR LPAREN BACK RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("back");
                 }
                 //System.out.println("Cambiando direccion a BACK");
               :}
                PUNTOCOMA
              | expresions CHANGEDIR LPAREN BACK RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("back");
                 }
                 //System.out.println("Cambiando direccion a BACK");
               :}
                PUNTOCOMA
              | CHANGEDIR LPAREN SAME RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("same");
                 }
                 //System.out.println("Cambiando direccion a SAME");
               :}
                PUNTOCOMA
              | expresions CHANGEDIR LPAREN SAME RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("same");
                 }
                 //System.out.println("Cambiando direccion a SAME");
               :}
                PUNTOCOMA
              | PLACE BLOCK
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock();
                 }
                 //System.out.println("Se colocará un bloque en la direccion actual");
               :}
                PUNTOCOMA
              | expresions PLACE BLOCK
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock();
                 }
                 //System.out.println("Se colocará un bloque en la direccion actual");
               :}
                PUNTOCOMA
              | PLACE BLOCK data:d
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock(d);
                 }
                 //System.out.println("Se colocará " + d + " bloques en la direccion actual");
               :}
                PUNTOCOMA
              | expresions PLACE BLOCK data:d
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock(d);
                 }
                 //System.out.println("Se colocará " + d + " bloques en la direccion actual");
               :}
                PUNTOCOMA
              | HIGH BLOCK
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock();
                 }
                 //System.out.println("Se colocará un bloque lvl2 en la posicion actual");
               :}
                PUNTOCOMA
              | expresions HIGH BLOCK
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock();
                 }
                 //System.out.println("Se colocará un bloque lvl2 en la posicion actual");
               :}
                PUNTOCOMA
              | HIGH BLOCK data:d
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock(d);
                 }
                 //System.out.println("Se colocará un bloques lvl" + d + " en la posicion actual");
               :}
                PUNTOCOMA
              | expresions HIGH BLOCK data:d
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock(d);
                 }
                 //System.out.println("Se colocará un bloques lvl" + d + " en la posicion actual");
               :}
                PUNTOCOMA
              | PUT LIGHT
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.putLight();
                 }
                 //System.out.println("Se colocará una luz azul en la posicion actual");
               :}
                PUNTOCOMA
              | expresions PUT LIGHT
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.putLight();
                 }
                 //System.out.println("Se colocará una luz azul en la posicion actual");
               :}
                PUNTOCOMA
              | POS LPAREN ident:x COMA ident:y RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.pos(x,y);
                 }
                 //System.out.println("Cambiando a celda posicion: (" + x + "," + y + ")");
               :}
             | expresions POS LPAREN ident:x COMA ident:y RPAREN
              {:
                if (CodeValidation.Corrida1 == false) {
                  CodeValidation.pos(x,y);
                }
                //System.out.println("Cambiando a celda posicion: (" + x + "," + y + ")");
              :}
                PUNTOCOMA
              | POSSTART LPAREN ident:x COMA ident:y RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.posStart(x,y);
                 }
                 //System.out.println("Posicion inicial: (" + x + ","+ y + ")");
               :}
                PUNTOCOMA
              | expresions POSSTART LPAREN ident:x COMA ident:y RPAREN
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.posStart(x,y);
                 }
                 //System.out.println("Posicion inicial: (" + x + ","+ y + ")");
               :}
                PUNTOCOMA
              | CALL ident:proc
               {:
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.call(proc);
                 }
                 //System.out.println("Llamando al procedimiento: " + i);
               :}
             | expresions CALL ident:proc
              {:
                if (CodeValidation.Corrida1 == false) {
                  CodeValidation.call(proc);
                }
                //System.out.println("Llamando al procedimiento: " + i);
              :}
                PUNTOCOMA
              | KEEP expresions SKIP KEND
               {:
                System.out.println("Bucle Keep encontrado");
               :}
      /*       | KEEP expresions SKIP expresions KEND
              {:
               System.out.println("Bucle Keep encontrado");
              :}
                PUNTOCOMA */
              | FOR ID ASSIGN data:d TIMES expresions:exp {: System.out.println(exp); :}FEND
               {://tira null el intento de sacar las expresions :c
                System.out.println("Bucle For encontrado");
               :}
                PUNTOCOMA
              | expresions FOR ID ASSIGN data:d TIMES expresions:exp
              {:
                  if (CodeValidation.Corrida1 == false) {
                    System.out.println(exp);} :} FEND
               {:
                  if (CodeValidation.Corrida1 == false) {
                    System.out.println("Bucle For encontrado");}
               :}
                PUNTOCOMA
              | WHEN ID ASSIGN data:d THEN expresions WHEND
               {:
                System.out.println("Bucle When encontrado");
               :}
                PUNTOCOMA
              ;

process     ::= PROC ident:i expresions EndPROC
               {:
                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.listProcesos.add(i);
                 //      //CodeValidation.listEXPRESIONESdELpROCESO.add(expresions);
		             }
                //System.out.println("Proceso creado");
               :}
                PUNTOCOMA
              | process PROC ident:i expresions EndPROC
               {:
                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.listProcesos.add(i);
                      // CodeValidation.listEXPRESIONESdELpROCESO.add(expresions);
		             }
                //System.out.println("Siguiente proceso creado");
               :}
                PUNTOCOMA
              ;

ident       ::= IDENTIFIER:i
               {:
                RESULT = i;
               :}
              ;
data        ::= NUMBER:n
               {:
                RESULT = n;
               :}
              ;
