
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 21 09:01:09 CST 2018
//----------------------------------------------------

package com.language.parser;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 21 09:01:09 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\007\000\002\002\004\000\002\010" +
    "\002\000\002\003\006\000\002\011\002\000\002\003\007" +
    "\000\002\012\002\000\002\003\010\000\002\013\002\000" +
    "\002\003\011\000\002\014\002\000\002\004\010\000\002" +
    "\015\002\000\002\004\011\000\002\016\002\000\002\004" +
    "\007\000\002\017\002\000\002\004\010\000\002\020\002" +
    "\000\002\004\007\000\002\021\002\000\002\004\010\000" +
    "\002\022\002\000\002\004\010\000\002\023\002\000\002" +
    "\004\011\000\002\024\002\000\002\004\010\000\002\025" +
    "\002\000\002\004\011\000\002\026\002\000\002\004\010" +
    "\000\002\027\002\000\002\004\011\000\002\030\002\000" +
    "\002\004\010\000\002\031\002\000\002\004\011\000\002" +
    "\032\002\000\002\004\006\000\002\033\002\000\002\004" +
    "\007\000\002\034\002\000\002\004\007\000\002\035\002" +
    "\000\002\004\010\000\002\036\002\000\002\004\006\000" +
    "\002\037\002\000\002\004\007\000\002\040\002\000\002" +
    "\004\007\000\002\041\002\000\002\004\010\000\002\042" +
    "\002\000\002\004\006\000\002\043\002\000\002\004\007" +
    "\000\002\044\002\000\002\004\012\000\002\045\002\000" +
    "\002\004\013\000\002\046\002\000\002\004\012\000\002" +
    "\047\002\000\002\004\013\000\002\050\002\000\002\004" +
    "\006\000\002\051\002\000\002\052\002\000\002\004\011" +
    "\000\002\053\002\000\002\054\002\000\002\004\014\000" +
    "\002\055\002\000\002\056\002\000\002\004\015\000\002" +
    "\057\002\000\002\060\002\000\002\004\014\000\002\061" +
    "\002\000\002\062\002\000\002\004\015\000\002\063\002" +
    "\000\002\004\007\000\002\064\002\000\002\065\002\000" +
    "\002\005\011\000\002\066\002\000\002\067\002\000\002" +
    "\005\012\000\002\006\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\004\005\001\002\000\004\002\351\001" +
    "\002\000\004\052\046\001\002\000\006\004\007\046\010" +
    "\001\002\000\004\052\046\001\002\000\034\005\016\006" +
    "\017\007\023\010\024\011\011\013\014\014\012\016\015" +
    "\017\026\022\013\025\020\027\021\032\025\001\002\000" +
    "\004\012\325\001\002\000\004\015\322\001\002\000\004" +
    "\023\311\001\002\000\004\012\303\001\002\000\004\033" +
    "\274\001\002\000\004\052\046\001\002\000\004\037\263" +
    "\001\002\000\004\023\252\001\002\000\004\033\243\001" +
    "\002\000\034\005\036\006\037\007\041\010\043\011\031" +
    "\013\034\014\033\016\035\022\032\025\040\027\042\032" +
    "\045\047\223\001\002\000\004\040\217\001\002\000\004" +
    "\033\176\001\002\000\004\052\046\001\002\000\034\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\022\uffbd\025\uffbd\027\uffbd\032\uffbd\001" +
    "\002\000\034\005\016\006\017\007\023\010\024\011\011" +
    "\013\014\014\012\016\015\017\026\022\013\025\020\027" +
    "\021\032\025\001\002\000\034\005\036\006\037\007\041" +
    "\010\043\011\031\013\034\014\033\016\035\020\044\022" +
    "\032\025\040\027\042\032\045\001\002\000\004\012\165" +
    "\001\002\000\004\023\154\001\002\000\004\015\151\001" +
    "\002\000\004\012\143\001\002\000\004\033\134\001\002" +
    "\000\004\052\046\001\002\000\004\037\123\001\002\000" +
    "\004\023\111\001\002\000\004\040\105\001\002\000\004" +
    "\033\076\001\002\000\004\033\055\001\002\000\004\021" +
    "\uffbc\001\002\000\004\052\046\001\002\000\044\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6\016" +
    "\uffa6\017\uffa6\022\uffa6\025\uffa6\027\uffa6\032\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\041\uffa6\001\002\000\004\035\uffae\001" +
    "\002\000\004\035\051\001\002\000\044\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\013\uffad\014\uffad\016\uffad\020" +
    "\uffad\022\uffad\024\uffad\025\uffad\026\uffad\027\uffad\032\uffad" +
    "\047\uffad\051\uffad\001\002\000\004\021\053\001\002\000" +
    "\004\035\054\001\002\000\044\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\013\uffbb\014\uffbb\016\uffbb\020\uffbb\022" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\032\uffbb\047\uffbb" +
    "\051\uffbb\001\002\000\012\042\056\043\060\044\061\045" +
    "\057\001\002\000\004\034\073\001\002\000\004\034\070" +
    "\001\002\000\004\034\065\001\002\000\004\034\062\001" +
    "\002\000\004\035\uffe1\001\002\000\004\035\064\001\002" +
    "\000\044\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\020\uffe0\022\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\032\uffe0\047\uffe0\051\uffe0\001\002\000" +
    "\004\035\uffe5\001\002\000\004\035\067\001\002\000\044" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\032\uffe4\047\uffe4\051\uffe4\001\002\000\004\035" +
    "\uffdd\001\002\000\004\035\072\001\002\000\044\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\016" +
    "\uffdc\020\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\032\uffdc\047\uffdc\051\uffdc\001\002\000\004\035\uffe9\001" +
    "\002\000\004\035\075\001\002\000\044\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\020" +
    "\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\032\uffe8" +
    "\047\uffe8\051\uffe8\001\002\000\004\052\046\001\002\000" +
    "\004\041\100\001\002\000\004\052\046\001\002\000\004" +
    "\034\102\001\002\000\004\035\uffc1\001\002\000\004\035" +
    "\104\001\002\000\044\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\013\uffc0\014\uffc0\016\uffc0\020\uffc0\022\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\032\uffc0\047\uffc0\051\uffc0" +
    "\001\002\000\004\052\046\001\002\000\004\035\uffed\001" +
    "\002\000\004\035\110\001\002\000\044\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\016\uffec\020" +
    "\uffec\022\uffec\024\uffec\025\uffec\026\uffec\027\uffec\032\uffec" +
    "\047\uffec\051\uffec\001\002\000\004\036\112\001\002\000" +
    "\004\053\113\001\002\000\010\030\uffa5\031\uffa5\035\uffa5" +
    "\001\002\000\004\031\115\001\002\000\034\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1\016\uffb1" +
    "\017\uffb1\022\uffb1\025\uffb1\027\uffb1\032\uffb1\001\002\000" +
    "\034\005\016\006\017\007\023\010\024\011\011\013\014" +
    "\014\012\016\015\017\026\022\013\025\020\027\021\032" +
    "\025\001\002\000\034\005\036\006\037\007\041\010\043" +
    "\011\031\013\034\014\033\016\035\022\032\025\040\026" +
    "\120\027\042\032\045\001\002\000\004\035\uffb0\001\002" +
    "\000\004\035\122\001\002\000\044\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf\016\uffaf\020\uffaf" +
    "\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\032\uffaf\047" +
    "\uffaf\051\uffaf\001\002\000\004\052\046\001\002\000\004" +
    "\035\ufff1\001\002\000\004\035\126\001\002\000\044\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\016\ufff0\020\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\032\ufff0\047\ufff0\051\ufff0\001\002\000\004\036\130" +
    "\001\002\000\004\053\113\001\002\000\004\035\ufff5\001" +
    "\002\000\004\035\133\001\002\000\044\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\016\ufff4\020" +
    "\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4" +
    "\047\ufff4\051\ufff4\001\002\000\004\052\046\001\002\000" +
    "\004\041\136\001\002\000\004\052\046\001\002\000\004" +
    "\034\140\001\002\000\004\035\uffc5\001\002\000\004\035" +
    "\142\001\002\000\044\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\013\uffc4\014\uffc4\016\uffc4\020\uffc4\022\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\032\uffc4\047\uffc4\051\uffc4" +
    "\001\002\000\006\035\uffd1\053\113\001\002\000\004\035" +
    "\uffcd\001\002\000\004\035\146\001\002\000\044\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016" +
    "\uffd0\020\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\032\uffd0\047\uffd0\051\uffd0\001\002\000\004\035\150\001" +
    "\002\000\044\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\013\uffcc\014\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\032\uffcc\047\uffcc\051\uffcc\001\002" +
    "\000\004\035\uffc9\001\002\000\004\035\153\001\002\000" +
    "\044\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8" +
    "\014\uffc8\016\uffc8\020\uffc8\022\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\032\uffc8\047\uffc8\051\uffc8\001\002\000\004" +
    "\036\155\001\002\000\004\053\113\001\002\000\004\030" +
    "\157\001\002\000\034\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\022\uffb7\025" +
    "\uffb7\027\uffb7\032\uffb7\001\002\000\034\005\016\006\017" +
    "\007\023\010\024\011\011\013\014\014\012\016\015\017" +
    "\026\022\013\025\020\027\021\032\025\001\002\000\034" +
    "\005\036\006\037\007\041\010\043\011\031\013\034\014" +
    "\033\016\035\022\032\024\162\025\040\027\042\032\045" +
    "\001\002\000\004\035\uffb6\001\002\000\004\035\164\001" +
    "\002\000\044\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\013\uffb5\014\uffb5\016\uffb5\020\uffb5\022\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\032\uffb5\047\uffb5\051\uffb5\001\002" +
    "\000\006\035\uffd9\053\113\001\002\000\004\035\172\001" +
    "\002\000\004\035\uffd5\001\002\000\004\035\171\001\002" +
    "\000\044\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\014\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\032\uffd4\047\uffd4\051\uffd4\001\002\000" +
    "\044\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\016\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\032\uffd8\047\uffd8\051\uffd8\001\002\000\004" +
    "\035\uffbf\001\002\000\004\035\175\001\002\000\044\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe\014\uffbe" +
    "\016\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\032\uffbe\047\uffbe\051\uffbe\001\002\000\012\042\177" +
    "\043\200\044\202\045\201\001\002\000\004\034\214\001" +
    "\002\000\004\034\211\001\002\000\004\034\206\001\002" +
    "\000\004\034\203\001\002\000\004\035\uffe3\001\002\000" +
    "\004\035\205\001\002\000\044\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\032\uffe2\047\uffe2" +
    "\051\uffe2\001\002\000\004\035\uffdf\001\002\000\004\035" +
    "\210\001\002\000\044\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\013\uffde\014\uffde\016\uffde\020\uffde\022\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\032\uffde\047\uffde\051\uffde" +
    "\001\002\000\004\035\uffe7\001\002\000\004\035\213\001" +
    "\002\000\044\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\020\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\032\uffe6\047\uffe6\051\uffe6\001\002" +
    "\000\004\035\uffeb\001\002\000\004\035\216\001\002\000" +
    "\044\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\014\uffea\016\uffea\020\uffea\022\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\032\uffea\047\uffea\051\uffea\001\002\000\004" +
    "\052\046\001\002\000\004\035\uffef\001\002\000\004\035" +
    "\222\001\002\000\044\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\013\uffee\014\uffee\016\uffee\020\uffee\022\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\032\uffee\047\uffee\051\uffee" +
    "\001\002\000\004\050\224\001\002\000\004\052\046\001" +
    "\002\000\006\002\001\050\226\001\002\000\004\052\046" +
    "\001\002\000\034\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\022\uffa9\025\uffa9" +
    "\027\uffa9\032\uffa9\001\002\000\034\005\016\006\017\007" +
    "\023\010\024\011\011\013\014\014\012\016\015\017\026" +
    "\022\013\025\020\027\021\032\025\001\002\000\034\005" +
    "\036\006\037\007\041\010\043\011\031\013\034\014\033" +
    "\016\035\022\032\025\040\027\042\032\045\051\232\001" +
    "\002\000\004\035\uffa8\001\002\000\004\035\234\001\002" +
    "\000\006\002\uffa7\050\uffa7\001\002\000\034\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\013\uffac\014\uffac\016\uffac" +
    "\017\uffac\022\uffac\025\uffac\027\uffac\032\uffac\001\002\000" +
    "\034\005\016\006\017\007\023\010\024\011\011\013\014" +
    "\014\012\016\015\017\026\022\013\025\020\027\021\032" +
    "\025\001\002\000\034\005\036\006\037\007\041\010\043" +
    "\011\031\013\034\014\033\016\035\022\032\025\040\027" +
    "\042\032\045\051\240\001\002\000\004\035\uffab\001\002" +
    "\000\004\035\242\001\002\000\006\002\uffaa\050\uffaa\001" +
    "\002\000\004\052\046\001\002\000\004\041\245\001\002" +
    "\000\004\052\046\001\002\000\004\034\247\001\002\000" +
    "\004\035\uffc3\001\002\000\004\035\251\001\002\000\044" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2\014" +
    "\uffc2\016\uffc2\020\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\032\uffc2\047\uffc2\051\uffc2\001\002\000\004\036" +
    "\253\001\002\000\004\053\113\001\002\000\004\031\255" +
    "\001\002\000\034\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\022\uffb4\025\uffb4" +
    "\027\uffb4\032\uffb4\001\002\000\034\005\016\006\017\007" +
    "\023\010\024\011\011\013\014\014\012\016\015\017\026" +
    "\022\013\025\020\027\021\032\025\001\002\000\034\005" +
    "\036\006\037\007\041\010\043\011\031\013\034\014\033" +
    "\016\035\022\032\025\040\026\260\027\042\032\045\001" +
    "\002\000\004\035\uffb3\001\002\000\004\035\262\001\002" +
    "\000\044\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013" +
    "\uffb2\014\uffb2\016\uffb2\020\uffb2\022\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\032\uffb2\047\uffb2\051\uffb2\001\002\000" +
    "\004\052\046\001\002\000\004\035\ufff3\001\002\000\004" +
    "\035\266\001\002\000\044\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\016\ufff2\020\ufff2\022\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\032\ufff2\047\ufff2\051" +
    "\ufff2\001\002\000\004\036\270\001\002\000\004\053\113" +
    "\001\002\000\004\035\ufff7\001\002\000\004\035\273\001" +
    "\002\000\044\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\013\ufff6\014\ufff6\016\ufff6\020\ufff6\022\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\032\ufff6\047\ufff6\051\ufff6\001\002" +
    "\000\004\052\046\001\002\000\004\041\276\001\002\000" +
    "\004\052\046\001\002\000\004\034\300\001\002\000\004" +
    "\035\uffc7\001\002\000\004\035\302\001\002\000\044\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\014\uffc6" +
    "\016\uffc6\020\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\032\uffc6\047\uffc6\051\uffc6\001\002\000\006\035\uffd3" +
    "\053\113\001\002\000\004\035\310\001\002\000\004\035" +
    "\uffcf\001\002\000\004\035\307\001\002\000\044\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce\016" +
    "\uffce\020\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\032\uffce\047\uffce\051\uffce\001\002\000\044\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\016\uffd2" +
    "\020\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\032" +
    "\uffd2\047\uffd2\051\uffd2\001\002\000\004\036\312\001\002" +
    "\000\004\053\113\001\002\000\004\030\314\001\002\000" +
    "\034\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\013\uffba" +
    "\014\uffba\016\uffba\017\uffba\022\uffba\025\uffba\027\uffba\032" +
    "\uffba\001\002\000\034\005\016\006\017\007\023\010\024" +
    "\011\011\013\014\014\012\016\015\017\026\022\013\025" +
    "\020\027\021\032\025\001\002\000\034\005\036\006\037" +
    "\007\041\010\043\011\031\013\034\014\033\016\035\022" +
    "\032\024\317\025\040\027\042\032\045\001\002\000\004" +
    "\035\uffb9\001\002\000\004\035\321\001\002\000\044\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\013\uffb8\014\uffb8" +
    "\016\uffb8\020\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\032\uffb8\047\uffb8\051\uffb8\001\002\000\004\035\uffcb" +
    "\001\002\000\004\035\324\001\002\000\044\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\013\uffca\014\uffca\016\uffca" +
    "\020\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca\032" +
    "\uffca\047\uffca\051\uffca\001\002\000\006\035\uffdb\053\113" +
    "\001\002\000\004\035\332\001\002\000\004\035\uffd7\001" +
    "\002\000\004\035\331\001\002\000\044\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\020" +
    "\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\032\uffd6" +
    "\047\uffd6\051\uffd6\001\002\000\044\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\013\uffda\014\uffda\016\uffda\020\uffda" +
    "\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda\032\uffda\047" +
    "\uffda\051\uffda\001\002\000\006\035\ufffd\036\335\001\002" +
    "\000\004\035\341\001\002\000\004\053\113\001\002\000" +
    "\004\035\ufff9\001\002\000\004\035\340\001\002\000\006" +
    "\004\ufff8\046\ufff8\001\002\000\006\004\ufffc\046\ufffc\001" +
    "\002\000\006\035\uffff\036\344\001\002\000\004\035\350" +
    "\001\002\000\004\053\113\001\002\000\004\035\ufffb\001" +
    "\002\000\004\035\347\001\002\000\006\004\ufffa\046\ufffa" +
    "\001\002\000\006\004\ufffe\046\ufffe\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\006\341\001\001\000\002\001\001\000\004" +
    "\006\332\001\001\000\004\004\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\172\001" +
    "\001\000\004\051\026\001\001\000\004\004\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\051\001\001\000\004\006\046\001\001\000\002\001" +
    "\001\000\004\063\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\076\001\001\000\002\001\001\000\004\006\100" +
    "\001\001\000\002\001\001\000\004\047\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\105\001\001" +
    "\000\004\021\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\115\001\001\000" +
    "\004\004\116\001\001\000\002\001\001\000\004\062\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\123\001\001\000\004\017\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\130\001" +
    "\001\000\004\015\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\134\001\001\000\002\001\001\000" +
    "\004\006\136\001\001\000\002\001\001\000\004\045\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\143\037\144\001\001\000\004\041\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\155\001\001\000" +
    "\002\001\001\000\004\055\157\001\001\000\004\004\160" +
    "\001\001\000\002\001\001\000\004\056\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\166\033\165" +
    "\001\001\000\002\001\001\000\004\035\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\217\001\001\000\004\020\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\224\001\001\000\004\006" +
    "\234\001\001\000\002\001\001\000\004\006\226\001\001" +
    "\000\004\066\227\001\001\000\004\004\230\001\001\000" +
    "\002\001\001\000\004\067\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\235\001\001\000\004\004" +
    "\236\001\001\000\002\001\001\000\004\065\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\243\001" +
    "\001\000\002\001\001\000\004\006\245\001\001\000\002" +
    "\001\001\000\004\046\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\253\001\001" +
    "\000\002\001\001\000\004\057\255\001\001\000\004\004" +
    "\256\001\001\000\002\001\001\000\004\060\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\263\001" +
    "\001\000\004\016\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\270\001\001\000" +
    "\004\014\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\274\001\001\000\002\001\001\000\004\006" +
    "\276\001\001\000\002\001\001\000\004\044\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\304\036" +
    "\303\001\001\000\002\001\001\000\004\040\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\312\001\001\000\002\001\001" +
    "\000\004\053\314\001\001\000\004\004\315\001\001\000" +
    "\002\001\001\000\004\054\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\326\032\325\001\001" +
    "\000\002\001\001\000\004\034\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\333" +
    "\001\001\000\002\001\001\000\004\007\335\001\001\000" +
    "\004\013\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\342\001\001\000\002\001" +
    "\001\000\004\007\344\001\001\000\004\012\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/* Reporte de error encontrado. */
public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        if (s.left >= 0) {
            m.append(" in line "+(s.left+1));
            if (s.right >= 0)
                m.append(", column "+(s.right+1));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}

/* Cuando se encuentra un error de donde el sistema no puede
    recuperarse, se lanza un error fatal. Se despliega el mensaje
    de error y se finaliza la ejecucion. */
public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}

/* Metodo main para garantizar la ejecucion del analizador
   lexico y sintactico, ademas que se pase como parametro la tabla
   de simbolos correspondiente. */
public static void main(String[] args){
    try {
        Parser asin = new Parser(
                new Scanner( new FileReader(args[0])));
        Object result = asin.parse().value; //parseo de datos

        //System.out.println("\n*** Resultados finales ***\n");
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // data ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = n;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ident ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = i;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // process ::= process PROC ident NT$46 expresions EndPROC NT$47 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

                 if (CodeValidation.Corrida1 == true) {
                   CodeValidation.ObteniendoExpr = false;
                   List<String> listaAUX = new ArrayList<String>(CodeValidation.listExpresiones);
                   CodeValidation.listExpresiones.clear();
                   CodeValidation.listExprProc.add(listaAUX);
                 } else {
                   CodeValidation.NoEntrar = false;
                 }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$47",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$46 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			             CodeValidation.listProcesos.add(i);
                   CodeValidation.ObteniendoExpr = true;
                 } else {
                   CodeValidation.NoEntrar = true;
                 }
                //System.out.println("Proceso creado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$46",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // process ::= PROC ident NT$44 expresions EndPROC NT$45 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

                 if (CodeValidation.Corrida1 == true) {
                   CodeValidation.ObteniendoExpr = false;
                   List<String> listaAUX = new ArrayList<String>(CodeValidation.listExpresiones);
                   CodeValidation.listExpresiones.clear();
                   CodeValidation.listExprProc.add(listaAUX);
                 } else {
                   CodeValidation.NoEntrar = false;
                 }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$45",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$44 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			             CodeValidation.listProcesos.add(i);
                   CodeValidation.ObteniendoExpr = true;
  		           } else {
                   CodeValidation.NoEntrar = true;
                 }
                //System.out.println("Proceso creado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$44",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresions ::= expresions CALL ident NT$43 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$43 ::= 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.call(proc);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("call");
                   CodeValidation.listExpresiones.add(proc);
                 }
                 //System.out.println("Llamando al procedimiento: " + i);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$43",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresions ::= expresions WHEN ID ASSIGN data THEN NT$41 expresions WHEND NT$42 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == true) {
                   CodeValidation.ObteniendoExpr = false;
                   CodeValidation.NoEntrar = false;
                   Integer i = CodeValidation.search("Id",CodeValidation.listVariables);
                   if (d.equals(CodeValidation.listValores.get(i))) {
                     CodeValidation.ParserDeExpresiones(CodeValidation.listExpresiones);
                   }
                   CodeValidation.listExpresiones.clear();
                 }
                // System.out.println("Bucle When encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$42",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$41 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.ObteniendoExpr = true;
                   CodeValidation.NoEntrar = true;
                 }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$41",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresions ::= WHEN ID ASSIGN data THEN NT$39 expresions WHEND NT$40 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == true) {
                   CodeValidation.ObteniendoExpr = false;
                   CodeValidation.NoEntrar = false;
                   Integer i = CodeValidation.search("Id",CodeValidation.listVariables);
                   if (d.equals(CodeValidation.listValores.get(i))) {
                     CodeValidation.ParserDeExpresiones(CodeValidation.listExpresiones);
                   }
                   CodeValidation.listExpresiones.clear();
                 }
                // System.out.println("Bucle When encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$40",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$39 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.ObteniendoExpr = true;
                   CodeValidation.NoEntrar = true;
                 }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$39",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresions ::= expresions FOR ID ASSIGN data TIMES NT$37 expresions FEND NT$38 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == true) {
                   CodeValidation.ObteniendoExpr = false;
                   CodeValidation.NoEntrar = false;
                   for (int n=0; n<d; n++) {
                     CodeValidation.ParserDeExpresiones(CodeValidation.listExpresiones);
                   }
                   CodeValidation.listExpresiones.clear();
                 }
                // System.out.println("Bucle For encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$38",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$37 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.ObteniendoExpr = true;
                   CodeValidation.NoEntrar = true;
                 }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$37",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresions ::= FOR ID ASSIGN data TIMES NT$35 expresions FEND NT$36 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == true) {
                   CodeValidation.ObteniendoExpr = false;
                   CodeValidation.NoEntrar = false;
                   for (int n=0; n<d; n++) {
                     CodeValidation.ParserDeExpresiones(CodeValidation.listExpresiones);
                   }
                   CodeValidation.listExpresiones.clear();
                 }
                // System.out.println("Bucle For encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$36",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$35 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.ObteniendoExpr = true;
                   CodeValidation.NoEntrar = true;
                 }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$35",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresions ::= KEEP NT$33 expresions SKIP NT$34 KEND PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == true) {
                  CodeValidation.ObteniendoExpr = false;
                  CodeValidation.NoEntrar = false;
                  //for (int n=0; n<d; n++) {   AQUI VA UN WHILE
                    CodeValidation.ParserDeExpresiones(CodeValidation.listExpresiones);
                  //}
                  CodeValidation.listExpresiones.clear();
                }
                //System.out.println("Bucle Keep encontrado");
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$33 ::= 
            {
              Object RESULT =null;

                if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                  CodeValidation.ObteniendoExpr = true;
                  CodeValidation.NoEntrar = true;
                }
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresions ::= CALL ident NT$32 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$32 ::= 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.call(proc);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("call");
                   CodeValidation.listExpresiones.add(proc);
                 }
                 //System.out.println("Llamando al procedimiento: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresions ::= expresions POSSTART LPAREN ident COMA ident RPAREN NT$31 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$31 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.posStart(x,y);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("posStart");
                   CodeValidation.listExpresiones.add(x);
                   CodeValidation.listExpresiones.add(y);
                 }
                 //System.out.println("Posicion inicial: (" + x + ","+ y + ")");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresions ::= POSSTART LPAREN ident COMA ident RPAREN NT$30 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$30 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.posStart(x,y);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("posStart");
                   CodeValidation.listExpresiones.add(x);
                   CodeValidation.listExpresiones.add(y);
                 }
                 //System.out.println("Posicion inicial: (" + x + ","+ y + ")");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresions ::= expresions POS LPAREN ident COMA ident RPAREN NT$29 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$29 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                  CodeValidation.pos(x,y);
                }
                if (CodeValidation.ObteniendoExpr == true) {
                  CodeValidation.listExpresiones.add("pos");
                  CodeValidation.listExpresiones.add(x);
                  CodeValidation.listExpresiones.add(y);
                }
                //System.out.println("Cambiando a celda posicion: (" + x + "," + y + ")");
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresions ::= POS LPAREN ident COMA ident RPAREN NT$28 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$28 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.pos(x,y);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("pos");
                   CodeValidation.listExpresiones.add(x);
                   CodeValidation.listExpresiones.add(y);
                 }
                 //System.out.println("Cambiando a celda posicion: (" + x + "," + y + ")");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresions ::= expresions PUT LIGHT NT$27 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$27 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.putLight();
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("putLight");
                 }
                 //System.out.println("Se colocará una luz azul en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresions ::= PUT LIGHT NT$26 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$26 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.putLight();
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("putLight");
                 }
                 //System.out.println("Se colocará una luz azul en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresions ::= expresions HIGH BLOCK data NT$25 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$25 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.highBlock(d);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("highBlockN");
                   CodeValidation.listExpresiones.add(Integer.toString(d));
                 }
                 //System.out.println("Se colocará un bloques lvl" + d + " en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresions ::= HIGH BLOCK data NT$24 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$24 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.highBlock(d);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("highBlockN");
                   CodeValidation.listExpresiones.add(Integer.toString(d));
                 }
                 //System.out.println("Se colocará un bloques lvl" + d + " en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresions ::= expresions HIGH BLOCK NT$23 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$23 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.highBlock();
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("highBlock");
                 }
                 //System.out.println("Se colocará un bloque lvl2 en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresions ::= HIGH BLOCK NT$22 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$22 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.highBlock();
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("highBlock");
                 }
                 //System.out.println("Se colocará un bloque lvl2 en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresions ::= expresions PLACE BLOCK data NT$21 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$21 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.placeBlock(d);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("placeBlockN");
                   CodeValidation.listExpresiones.add(Integer.toString(d));
                 }
                 //System.out.println("Se colocará " + d + " bloques en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresions ::= PLACE BLOCK data NT$20 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$20 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.placeBlock(d);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("placeBlockN");
                   CodeValidation.listExpresiones.add(Integer.toString(d));
                 }
                 //System.out.println("Se colocará " + d + " bloques en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresions ::= expresions PLACE BLOCK NT$19 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$19 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.placeBlock();
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("placeBlock");
                 }
                 //System.out.println("Se colocará un bloque en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresions ::= PLACE BLOCK NT$18 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$18 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.placeBlock();
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("placeBlock");
                 }
                 //System.out.println("Se colocará un bloque en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresions ::= expresions CHANGEDIR LPAREN SAME RPAREN NT$17 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$17 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("same");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("same");
                 }
                 //System.out.println("Cambiando direccion a SAME");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresions ::= CHANGEDIR LPAREN SAME RPAREN NT$16 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$16 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("same");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("same");
                 }
                 //System.out.println("Cambiando direccion a SAME");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresions ::= expresions CHANGEDIR LPAREN BACK RPAREN NT$15 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$15 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("back");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("back");
                 }
                 //System.out.println("Cambiando direccion a BACK");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresions ::= CHANGEDIR LPAREN BACK RPAREN NT$14 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$14 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("back");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("back");
                 }
                 //System.out.println("Cambiando direccion a BACK");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresions ::= expresions CHANGEDIR LPAREN RIGHT RPAREN NT$13 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("right");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("right");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresions ::= CHANGEDIR LPAREN RIGHT RPAREN NT$12 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("right");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("right");
                 }
                 //System.out.println("Cambiando direccion a RIGHT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresions ::= expresions CHANGEDIR LPAREN LEFT RPAREN NT$11 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("left");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("left");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresions ::= CHANGEDIR LPAREN LEFT RPAREN NT$10 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.changeDir("left");
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("changeDir");
                   CodeValidation.listExpresiones.add("left");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresions ::= expresions LESS REDUCED ident NT$9 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.less(i);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("less");
                   CodeValidation.listExpresiones.add(i);
                 }
                 //System.out.println("Se quitará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresions ::= LESS REDUCED ident NT$8 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.less(i);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("less");
                   CodeValidation.listExpresiones.add(i);
                 }
                 //System.out.println("Se quitará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresions ::= expresions ADD AGGREGATE ident NT$7 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.add(i);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("add");
                   CodeValidation.listExpresiones.add(i);
                 }
                 //System.out.println("Se agregará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresions ::= ADD AGGREGATE ident NT$6 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.add(i);
                 }
                 if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("add");
                   CodeValidation.listExpresiones.add(i);
                 }
                 //System.out.println("Se agregará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresions ::= expresions SET ident ASSIGN data NT$5 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.set(i, d);
                 } else if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("set");
                   CodeValidation.listExpresiones.add(i);
                   CodeValidation.listExpresiones.add(Integer.toString(d));
                 }
                 //System.out.println("La variable a modificar tiene el nombre: " + i + " y el valor cambiará a: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresions ::= SET ident ASSIGN data NT$4 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false & CodeValidation.NoEntrar == false) {
                   CodeValidation.set(i, d);
                 } else if (CodeValidation.ObteniendoExpr == true) {
                   CodeValidation.listExpresiones.add("set");
                   CodeValidation.listExpresiones.add(i);
                   CodeValidation.listExpresiones.add(Integer.toString(d));
                 }
                 // System.out.println("La variable a modificar tiene el nombre: " + i + " y el valor cambiará a: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifiers ::= identifiers VAR ident ASSIGN data NT$3 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			               CodeValidation.var(i,d);
		             }
                 //System.out.println("Nueva variable con nombre: " + i + " y valor: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifiers ::= VAR ident ASSIGN data NT$2 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.var(i,d);
		             }
                 //System.out.println("Nueva variable con nombre: " + i + " y valor: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifiers ::= identifiers VAR ident NT$1 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			               CodeValidation.var(i);
		             }
                 //System.out.println("Nueva variable con nombre: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifiers ::= VAR ident NT$0 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.var(i);
		             }
                 //System.out.println("Nueva variable con nombre: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sintaxis EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sintaxis ::= identifiers BEGIN expresions END process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sintaxis",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

