
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 17 11:30:17 CST 2018
//----------------------------------------------------

package com.language.parser;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 17 11:30:17 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\007\000\002\002\004\000\002\010" +
    "\002\000\002\003\006\000\002\011\002\000\002\003\007" +
    "\000\002\012\002\000\002\003\010\000\002\013\002\000" +
    "\002\003\011\000\002\014\002\000\002\004\010\000\002" +
    "\015\002\000\002\004\011\000\002\016\002\000\002\004" +
    "\007\000\002\017\002\000\002\004\010\000\002\020\002" +
    "\000\002\004\007\000\002\021\002\000\002\004\010\000" +
    "\002\022\002\000\002\004\010\000\002\023\002\000\002" +
    "\004\011\000\002\024\002\000\002\004\010\000\002\025" +
    "\002\000\002\004\011\000\002\026\002\000\002\004\010" +
    "\000\002\027\002\000\002\004\011\000\002\030\002\000" +
    "\002\004\010\000\002\031\002\000\002\004\011\000\002" +
    "\032\002\000\002\004\006\000\002\033\002\000\002\004" +
    "\007\000\002\034\002\000\002\004\007\000\002\035\002" +
    "\000\002\004\010\000\002\036\002\000\002\004\006\000" +
    "\002\037\002\000\002\004\007\000\002\040\002\000\002" +
    "\004\007\000\002\041\002\000\002\004\010\000\002\042" +
    "\002\000\002\004\006\000\002\043\002\000\002\004\007" +
    "\000\002\004\010\000\002\044\002\000\002\004\013\000" +
    "\002\045\002\000\002\004\012\000\002\046\002\000\002" +
    "\004\013\000\002\004\004\000\002\047\002\000\002\004" +
    "\007\000\002\004\006\000\002\050\002\000\002\051\002" +
    "\000\002\004\014\000\002\052\002\000\002\053\002\000" +
    "\002\004\015\000\002\054\002\000\002\004\013\000\002" +
    "\055\002\000\002\005\010\000\002\056\002\000\002\005" +
    "\011\000\002\006\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\004\005\001\002\000\004\002\325\001" +
    "\002\000\004\052\044\001\002\000\006\004\007\046\010" +
    "\001\002\000\004\052\044\001\002\000\034\005\016\006" +
    "\017\007\021\010\024\011\011\013\014\014\013\016\015" +
    "\017\026\022\012\025\020\027\023\032\025\001\002\000" +
    "\004\012\301\001\002\000\004\023\270\001\002\000\004" +
    "\015\265\001\002\000\004\012\257\001\002\000\004\033" +
    "\252\001\002\000\004\052\044\001\002\000\004\037\241" +
    "\001\002\000\004\023\231\001\002\000\004\040\225\001" +
    "\002\000\032\005\035\006\036\007\040\010\041\011\030" +
    "\013\033\014\031\016\034\022\032\027\037\032\043\047" +
    "\207\001\002\000\004\033\200\001\002\000\004\033\157" +
    "\001\002\000\004\052\044\001\002\000\034\005\016\006" +
    "\017\007\021\010\024\011\011\013\014\014\013\016\015" +
    "\017\026\022\012\025\020\027\023\032\025\001\002\000" +
    "\032\005\035\006\036\007\040\010\041\011\030\013\033" +
    "\014\031\016\034\020\042\022\032\027\037\032\043\001" +
    "\002\000\004\012\150\001\002\000\004\015\145\001\002" +
    "\000\004\023\134\001\002\000\004\012\126\001\002\000" +
    "\004\033\117\001\002\000\004\052\044\001\002\000\004" +
    "\037\105\001\002\000\004\033\076\001\002\000\004\040" +
    "\072\001\002\000\004\033\051\001\002\000\004\021\050" +
    "\001\002\000\004\052\044\001\002\000\056\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\041\uffb0\047\uffb0" +
    "\051\uffb0\001\002\000\004\035\uffbf\001\002\000\004\035" +
    "\047\001\002\000\042\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\013\uffbe\014\uffbe\016\uffbe\020\uffbe\022\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\032\uffbe\047\uffbe\051\uffbe\001\002" +
    "\000\042\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\016\uffbd\020\uffbd\022\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\032\uffbd\047\uffbd\051\uffbd\001\002\000\012\042" +
    "\052\043\054\044\055\045\053\001\002\000\004\034\067" +
    "\001\002\000\004\034\064\001\002\000\004\034\061\001" +
    "\002\000\004\034\056\001\002\000\004\035\uffe1\001\002" +
    "\000\004\035\060\001\002\000\042\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\020\uffe0" +
    "\022\uffe0\024\uffe0\026\uffe0\027\uffe0\032\uffe0\047\uffe0\051" +
    "\uffe0\001\002\000\004\035\uffe5\001\002\000\004\035\063" +
    "\001\002\000\042\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\022\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\032\uffe4\047\uffe4\051\uffe4\001\002\000" +
    "\004\035\uffdd\001\002\000\004\035\066\001\002\000\042" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014" +
    "\uffdc\016\uffdc\020\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc" +
    "\032\uffdc\047\uffdc\051\uffdc\001\002\000\004\035\uffe9\001" +
    "\002\000\004\035\071\001\002\000\042\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\020" +
    "\uffe8\022\uffe8\024\uffe8\026\uffe8\027\uffe8\032\uffe8\047\uffe8" +
    "\051\uffe8\001\002\000\004\052\044\001\002\000\004\035" +
    "\uffed\001\002\000\004\035\075\001\002\000\042\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\016" +
    "\uffec\020\uffec\022\uffec\024\uffec\026\uffec\027\uffec\032\uffec" +
    "\047\uffec\051\uffec\001\002\000\004\052\044\001\002\000" +
    "\004\041\100\001\002\000\004\052\044\001\002\000\004" +
    "\034\102\001\002\000\004\035\uffc2\001\002\000\004\035" +
    "\104\001\002\000\042\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\013\uffc1\014\uffc1\016\uffc1\020\uffc1\022\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\032\uffc1\047\uffc1\051\uffc1\001\002" +
    "\000\004\052\044\001\002\000\004\035\ufff1\001\002\000" +
    "\004\035\110\001\002\000\042\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\013\ufff0\014\ufff0\016\ufff0\020\ufff0\022" +
    "\ufff0\024\ufff0\026\ufff0\027\ufff0\032\ufff0\047\ufff0\051\ufff0" +
    "\001\002\000\004\036\112\001\002\000\004\053\113\001" +
    "\002\000\010\030\uffaf\031\uffaf\035\uffaf\001\002\000\004" +
    "\035\ufff5\001\002\000\004\035\116\001\002\000\042\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4" +
    "\016\ufff4\020\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\032" +
    "\ufff4\047\ufff4\051\ufff4\001\002\000\004\052\044\001\002" +
    "\000\004\041\121\001\002\000\004\052\044\001\002\000" +
    "\004\034\123\001\002\000\004\035\uffc6\001\002\000\004" +
    "\035\125\001\002\000\042\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\013\uffc5\014\uffc5\016\uffc5\020\uffc5\022\uffc5" +
    "\024\uffc5\026\uffc5\027\uffc5\032\uffc5\047\uffc5\051\uffc5\001" +
    "\002\000\006\035\uffd1\053\113\001\002\000\004\035\uffcd" +
    "\001\002\000\004\035\131\001\002\000\042\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\020\uffd0\022\uffd0\024\uffd0\026\uffd0\027\uffd0\032\uffd0\047" +
    "\uffd0\051\uffd0\001\002\000\004\035\133\001\002\000\042" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\014" +
    "\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc\026\uffcc\027\uffcc" +
    "\032\uffcc\047\uffcc\051\uffcc\001\002\000\004\036\135\001" +
    "\002\000\004\053\113\001\002\000\004\030\137\001\002" +
    "\000\034\005\016\006\017\007\021\010\024\011\011\013" +
    "\014\014\013\016\015\017\026\022\012\025\020\027\023" +
    "\032\025\001\002\000\032\005\035\006\036\007\040\010" +
    "\041\011\030\013\033\014\031\016\034\022\032\024\uffb9" +
    "\027\037\032\043\001\002\000\004\024\142\001\002\000" +
    "\004\035\uffb8\001\002\000\004\035\144\001\002\000\042" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013\uffb7\014" +
    "\uffb7\016\uffb7\020\uffb7\022\uffb7\024\uffb7\026\uffb7\027\uffb7" +
    "\032\uffb7\047\uffb7\051\uffb7\001\002\000\004\035\uffc9\001" +
    "\002\000\004\035\147\001\002\000\042\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8\020" +
    "\uffc8\022\uffc8\024\uffc8\026\uffc8\027\uffc8\032\uffc8\047\uffc8" +
    "\051\uffc8\001\002\000\006\035\uffd9\053\113\001\002\000" +
    "\004\035\155\001\002\000\004\035\uffd5\001\002\000\004" +
    "\035\154\001\002\000\042\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4\020\uffd4\022\uffd4" +
    "\024\uffd4\026\uffd4\027\uffd4\032\uffd4\047\uffd4\051\uffd4\001" +
    "\002\000\042\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\016\uffd8\020\uffd8\022\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\032\uffd8\047\uffd8\051\uffd8\001\002\000\042" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\016\uffc0\020\uffc0\022\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\032\uffc0\047\uffc0\051\uffc0\001\002\000\012\042\160\043" +
    "\161\044\163\045\162\001\002\000\004\034\175\001\002" +
    "\000\004\034\172\001\002\000\004\034\167\001\002\000" +
    "\004\034\164\001\002\000\004\035\uffe3\001\002\000\004" +
    "\035\166\001\002\000\042\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\022\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\032\uffe2\047\uffe2\051\uffe2\001" +
    "\002\000\004\035\uffdf\001\002\000\004\035\171\001\002" +
    "\000\042\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013" +
    "\uffde\014\uffde\016\uffde\020\uffde\022\uffde\024\uffde\026\uffde" +
    "\027\uffde\032\uffde\047\uffde\051\uffde\001\002\000\004\035" +
    "\uffe7\001\002\000\004\035\174\001\002\000\042\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\016" +
    "\uffe6\020\uffe6\022\uffe6\024\uffe6\026\uffe6\027\uffe6\032\uffe6" +
    "\047\uffe6\051\uffe6\001\002\000\004\035\uffeb\001\002\000" +
    "\004\035\177\001\002\000\042\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\013\uffea\014\uffea\016\uffea\020\uffea\022" +
    "\uffea\024\uffea\026\uffea\027\uffea\032\uffea\047\uffea\051\uffea" +
    "\001\002\000\004\052\044\001\002\000\004\041\202\001" +
    "\002\000\004\052\044\001\002\000\004\034\204\001\002" +
    "\000\004\035\uffc4\001\002\000\004\035\206\001\002\000" +
    "\042\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\020\uffc3\022\uffc3\024\uffc3\026\uffc3\027" +
    "\uffc3\032\uffc3\047\uffc3\051\uffc3\001\002\000\004\050\210" +
    "\001\002\000\004\052\044\001\002\000\006\002\001\050" +
    "\212\001\002\000\004\052\044\001\002\000\034\005\016" +
    "\006\017\007\021\010\024\011\011\013\014\014\013\016" +
    "\015\017\026\022\012\025\020\027\023\032\025\001\002" +
    "\000\032\005\035\006\036\007\040\010\041\011\030\013" +
    "\033\014\031\016\034\022\032\027\037\032\043\051\215" +
    "\001\002\000\004\035\uffb2\001\002\000\004\035\217\001" +
    "\002\000\006\002\uffb1\050\uffb1\001\002\000\034\005\016" +
    "\006\017\007\021\010\024\011\011\013\014\014\013\016" +
    "\015\017\026\022\012\025\020\027\023\032\025\001\002" +
    "\000\032\005\035\006\036\007\040\010\041\011\030\013" +
    "\033\014\031\016\034\022\032\027\037\032\043\051\222" +
    "\001\002\000\004\035\uffb4\001\002\000\004\035\224\001" +
    "\002\000\006\002\uffb3\050\uffb3\001\002\000\004\052\044" +
    "\001\002\000\004\035\uffef\001\002\000\004\035\230\001" +
    "\002\000\042\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\014\uffee\016\uffee\020\uffee\022\uffee\024\uffee\026" +
    "\uffee\027\uffee\032\uffee\047\uffee\051\uffee\001\002\000\004" +
    "\036\232\001\002\000\004\053\113\001\002\000\004\031" +
    "\234\001\002\000\034\005\016\006\017\007\021\010\024" +
    "\011\011\013\014\014\013\016\015\017\026\022\012\025" +
    "\020\027\023\032\025\001\002\000\032\005\035\006\036" +
    "\007\040\010\041\011\030\013\033\014\031\016\034\022" +
    "\032\026\236\027\037\032\043\001\002\000\004\035\uffb6" +
    "\001\002\000\004\035\240\001\002\000\042\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\013\uffb5\014\uffb5\016\uffb5" +
    "\020\uffb5\022\uffb5\024\uffb5\026\uffb5\027\uffb5\032\uffb5\047" +
    "\uffb5\051\uffb5\001\002\000\004\052\044\001\002\000\004" +
    "\035\ufff3\001\002\000\004\035\244\001\002\000\042\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2" +
    "\016\ufff2\020\ufff2\022\ufff2\024\ufff2\026\ufff2\027\ufff2\032" +
    "\ufff2\047\ufff2\051\ufff2\001\002\000\004\036\246\001\002" +
    "\000\004\053\113\001\002\000\004\035\ufff7\001\002\000" +
    "\004\035\251\001\002\000\042\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\013\ufff6\014\ufff6\016\ufff6\020\ufff6\022" +
    "\ufff6\024\ufff6\026\ufff6\027\ufff6\032\ufff6\047\ufff6\051\ufff6" +
    "\001\002\000\004\052\044\001\002\000\004\041\254\001" +
    "\002\000\004\052\044\001\002\000\004\034\256\001\002" +
    "\000\042\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013" +
    "\uffc7\014\uffc7\016\uffc7\020\uffc7\022\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\032\uffc7\047\uffc7\051\uffc7\001\002\000\006\035" +
    "\uffd3\053\113\001\002\000\004\035\264\001\002\000\004" +
    "\035\uffcf\001\002\000\004\035\263\001\002\000\042\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce" +
    "\016\uffce\020\uffce\022\uffce\024\uffce\026\uffce\027\uffce\032" +
    "\uffce\047\uffce\051\uffce\001\002\000\042\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\016\uffd2\020" +
    "\uffd2\022\uffd2\024\uffd2\026\uffd2\027\uffd2\032\uffd2\047\uffd2" +
    "\051\uffd2\001\002\000\004\035\uffcb\001\002\000\004\035" +
    "\267\001\002\000\042\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\013\uffca\014\uffca\016\uffca\020\uffca\022\uffca\024" +
    "\uffca\026\uffca\027\uffca\032\uffca\047\uffca\051\uffca\001\002" +
    "\000\004\036\271\001\002\000\004\053\113\001\002\000" +
    "\004\030\273\001\002\000\034\005\016\006\017\007\021" +
    "\010\024\011\011\013\014\014\013\016\015\017\026\022" +
    "\012\025\020\027\023\032\025\001\002\000\032\005\035" +
    "\006\036\007\040\010\041\011\030\013\033\014\031\016" +
    "\034\022\032\024\uffbc\027\037\032\043\001\002\000\004" +
    "\024\276\001\002\000\004\035\uffbb\001\002\000\004\035" +
    "\300\001\002\000\042\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\013\uffba\014\uffba\016\uffba\020\uffba\022\uffba\024" +
    "\uffba\026\uffba\027\uffba\032\uffba\047\uffba\051\uffba\001\002" +
    "\000\006\035\uffdb\053\113\001\002\000\004\035\306\001" +
    "\002\000\004\035\uffd7\001\002\000\004\035\305\001\002" +
    "\000\042\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\016\uffd6\020\uffd6\022\uffd6\024\uffd6\026\uffd6" +
    "\027\uffd6\032\uffd6\047\uffd6\051\uffd6\001\002\000\042\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda" +
    "\016\uffda\020\uffda\022\uffda\024\uffda\026\uffda\027\uffda\032" +
    "\uffda\047\uffda\051\uffda\001\002\000\006\035\ufffd\036\311" +
    "\001\002\000\004\035\315\001\002\000\004\053\113\001" +
    "\002\000\004\035\ufff9\001\002\000\004\035\314\001\002" +
    "\000\006\004\ufff8\046\ufff8\001\002\000\006\004\ufffc\046" +
    "\ufffc\001\002\000\006\035\uffff\036\320\001\002\000\004" +
    "\035\324\001\002\000\004\053\113\001\002\000\004\035" +
    "\ufffb\001\002\000\004\035\323\001\002\000\006\004\ufffa" +
    "\046\ufffa\001\002\000\006\004\ufffe\046\ufffe\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\006\315\001\001\000\002\001\001\000\004" +
    "\006\306\001\001\000\004\004\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\155\001" +
    "\001\000\004\004\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\044\001\001\000\002" +
    "\001\001\000\004\047\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\072\001\001\000\004" +
    "\021\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\076\001\001\000\002\001\001\000\004\006\100" +
    "\001\001\000\002\001\001\000\004\046\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\105\001\001" +
    "\000\004\017\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\113\001\001\000\002" +
    "\001\001\000\004\015\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\117\001\001\000\002\001\001" +
    "\000\004\006\121\001\001\000\002\001\001\000\004\044" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\126\037\127\001\001\000\004\041\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\135\001\001\000" +
    "\002\001\001\000\004\004\137\001\001\000\004\052\140" +
    "\001\001\000\002\001\001\000\004\053\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\151\033" +
    "\150\001\001\000\002\001\001\000\004\035\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\200\001\001\000\002\001\001\000\004" +
    "\006\202\001\001\000\002\001\001\000\004\045\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\210" +
    "\001\001\000\004\006\217\001\001\000\002\001\001\000" +
    "\004\006\212\001\001\000\004\004\213\001\001\000\002" +
    "\001\001\000\004\056\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\220\001\001\000\002\001\001" +
    "\000\004\055\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\225\001\001\000\004\020\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\232\001\001\000\002\001\001\000\004\004\234" +
    "\001\001\000\002\001\001\000\004\054\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\241\001\001" +
    "\000\004\016\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\246\001\001\000\004" +
    "\014\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\252\001\001\000\002\001\001\000\004\006\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\260\036\257\001\001\000\002\001\001\000\004\040\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\271\001\001\000" +
    "\002\001\001\000\004\004\273\001\001\000\004\050\274" +
    "\001\001\000\002\001\001\000\004\051\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\302\032\301" +
    "\001\001\000\002\001\001\000\004\034\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\307\001\001\000\002\001\001\000\004\007\311\001" +
    "\001\000\004\013\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\316\001\001\000" +
    "\002\001\001\000\004\007\320\001\001\000\004\012\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/* Reporte de error encontrado. */
public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        if (s.left >= 0) {
            m.append(" in line "+(s.left+1));
            if (s.right >= 0)
                m.append(", column "+(s.right+1));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}

/* Cuando se encuentra un error de donde el sistema no puede
    recuperarse, se lanza un error fatal. Se despliega el mensaje
    de error y se finaliza la ejecucion. */
public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}

/* Metodo main para garantizar la ejecucion del analizador
   lexico y sintactico, ademas que se pase como parametro la tabla
   de simbolos correspondiente. */
public static void main(String[] args){
    try {
        Parser asin = new Parser(
                new Scanner( new FileReader(args[0])));
        Object result = asin.parse().value; //parseo de datos

        //System.out.println("\n*** Resultados finales ***\n");
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // data ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = n;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ident ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = i;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // process ::= process PROC ident expresions EndPROC NT$38 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$38 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.listProcesos.add(i);
                      // CodeValidation.listEXPRESIONESdELpROCESO.add(expresions);
		             }
                //System.out.println("Siguiente proceso creado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$38",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // process ::= PROC ident expresions EndPROC NT$37 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$37 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.listProcesos.add(i);
                 //      //CodeValidation.listEXPRESIONESdELpROCESO.add(expresions);
		             }
                //System.out.println("Proceso creado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$37",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresions ::= WHEN ID ASSIGN data THEN expresions WHEND NT$36 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$36 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

                System.out.println("Bucle When encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$36",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresions ::= expresions FOR ID ASSIGN data TIMES expresions NT$34 FEND NT$35 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                  if (CodeValidation.Corrida1 == false) {
                    System.out.println("Bucle For encontrado");}
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$35",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$34 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                  if (CodeValidation.Corrida1 == false) {
                    System.out.println(exp);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresions ::= FOR ID ASSIGN data TIMES expresions NT$32 FEND NT$33 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
//tira null el intento de sacar las expresions :c
                System.out.println("Bucle For encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$32 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresions ::= KEEP expresions SKIP KEND 
            {
              Object RESULT =null;
		
                System.out.println("Bucle Keep encontrado");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresions ::= expresions CALL ident NT$31 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$31 ::= 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (CodeValidation.Corrida1 == false) {
                  CodeValidation.call(proc);
                }
                //System.out.println("Llamando al procedimiento: " + i);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresions ::= CALL ident 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.call(proc);
                 }
                 //System.out.println("Llamando al procedimiento: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresions ::= expresions POSSTART LPAREN ident COMA ident RPAREN NT$30 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$30 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.posStart(x,y);
                 }
                 //System.out.println("Posicion inicial: (" + x + ","+ y + ")");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresions ::= POSSTART LPAREN ident COMA ident RPAREN NT$29 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$29 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.posStart(x,y);
                 }
                 //System.out.println("Posicion inicial: (" + x + ","+ y + ")");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresions ::= expresions POS LPAREN ident COMA ident RPAREN NT$28 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$28 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                if (CodeValidation.Corrida1 == false) {
                  CodeValidation.pos(x,y);
                }
                //System.out.println("Cambiando a celda posicion: (" + x + "," + y + ")");
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresions ::= POS LPAREN ident COMA ident RPAREN 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.pos(x,y);
                 }
                 //System.out.println("Cambiando a celda posicion: (" + x + "," + y + ")");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresions ::= expresions PUT LIGHT NT$27 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$27 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.putLight();
                 }
                 //System.out.println("Se colocará una luz azul en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresions ::= PUT LIGHT NT$26 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$26 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.putLight();
                 }
                 //System.out.println("Se colocará una luz azul en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresions ::= expresions HIGH BLOCK data NT$25 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$25 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock(d);
                 }
                 //System.out.println("Se colocará un bloques lvl" + d + " en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresions ::= HIGH BLOCK data NT$24 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$24 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock(d);
                 }
                 //System.out.println("Se colocará un bloques lvl" + d + " en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresions ::= expresions HIGH BLOCK NT$23 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$23 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock();
                 }
                 //System.out.println("Se colocará un bloque lvl2 en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresions ::= HIGH BLOCK NT$22 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$22 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.highBlock();
                 }
                 //System.out.println("Se colocará un bloque lvl2 en la posicion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresions ::= expresions PLACE BLOCK data NT$21 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$21 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock(d);
                 }
                 //System.out.println("Se colocará " + d + " bloques en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresions ::= PLACE BLOCK data NT$20 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$20 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock(d);
                 }
                 //System.out.println("Se colocará " + d + " bloques en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresions ::= expresions PLACE BLOCK NT$19 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$19 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock();
                 }
                 //System.out.println("Se colocará un bloque en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresions ::= PLACE BLOCK NT$18 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$18 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.placeBlock();
                 }
                 //System.out.println("Se colocará un bloque en la direccion actual");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresions ::= expresions CHANGEDIR LPAREN SAME RPAREN NT$17 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$17 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("same");
                 }
                 //System.out.println("Cambiando direccion a SAME");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresions ::= CHANGEDIR LPAREN SAME RPAREN NT$16 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$16 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("same");
                 }
                 //System.out.println("Cambiando direccion a SAME");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresions ::= expresions CHANGEDIR LPAREN BACK RPAREN NT$15 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$15 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("back");
                 }
                 //System.out.println("Cambiando direccion a BACK");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresions ::= CHANGEDIR LPAREN BACK RPAREN NT$14 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$14 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("back");
                 }
                 //System.out.println("Cambiando direccion a BACK");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresions ::= expresions CHANGEDIR LPAREN RIGHT RPAREN NT$13 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("right");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresions ::= CHANGEDIR LPAREN RIGHT RPAREN NT$12 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("right");
                 }
                 //System.out.println("Cambiando direccion a RIGHT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresions ::= expresions CHANGEDIR LPAREN LEFT RPAREN NT$11 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("left");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresions ::= CHANGEDIR LPAREN LEFT RPAREN NT$10 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.changeDir("left");
                 }
                 //System.out.println("Cambiando direccion a LEFT");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresions ::= expresions LESS REDUCED ident NT$9 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.less(i);
                 }
                 //System.out.println("Se quitará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresions ::= LESS REDUCED ident NT$8 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.less(i);
                 }
                 //System.out.println("Se quitará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresions ::= expresions ADD AGGREGATE ident NT$7 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.add(i);
                 }
                 //System.out.println("Se agregará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresions ::= ADD AGGREGATE ident NT$6 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.add(i);
                 }
                 //System.out.println("Se agregará 1 a la variable: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresions ::= expresions SET ident ASSIGN data NT$5 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.set(i, d);
                 }
                 //System.out.println("La variable a modificar tiene el nombre: " + i + " y el valor cambiará a: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresions ::= SET ident ASSIGN data NT$4 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == false) {
                   CodeValidation.set(i, d);
                 }
                 //System.out.println("La variable a modificar tiene el nombre: " + i + " y el valor cambiará a: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifiers ::= identifiers VAR ident ASSIGN data NT$3 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			               CodeValidation.var(i,d);
		             }
                 //System.out.println("Nueva variable con nombre: " + i + " y valor: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifiers ::= VAR ident ASSIGN data NT$2 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.var(i,d);
		             }
                 //System.out.println("Nueva variable con nombre: " + i + " y valor: " + d);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifiers ::= identifiers VAR ident NT$1 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			               CodeValidation.var(i);
		             }
                 //System.out.println("Nueva variable con nombre: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifiers ::= VAR ident NT$0 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                 if (CodeValidation.Corrida1 == true) {
			                CodeValidation.var(i);
		             }
                 //System.out.println("Nueva variable con nombre: " + i);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sintaxis EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sintaxis ::= identifiers BEGIN expresions END process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sintaxis",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

